자바


C,C++ 의 포인터랑, 다중상속을 없애버렸어

플랫폼에 독립적이다 (JVM 만 있으면 어디서든지 Linux, Window, Mac )  , jvm 은 자바로 된 프로그램을 실행해주는 것 
Garbage Collector로 사용되지 않는 메모리를 자동적으로 정리해준다.

jdk 
환경 변수 지정 - 새로만들기   이름 : JAVA_HOME    값 : jdk가 설치된 경로    , CLASSPATH, PATH  다  혀 




int [] arr= {10,20,30,40,50}

for(int value: arr){
  System.out.println(value);
}




String 클래스 : new라는 연산자 필요없이 인스턴스를 만들수 있다.  1. String str1 = "hello";, 2.String str2 = "hello" 3.String str3 = new String("hello"); 4.String str4 = new String("hello");
1.은 상수 영역에 저장됨 , 2.는 1이랑 같은것을 가르킨다. 
3. 새로운 인스턴스를 힙 영역에 만들어지게되 4 역시 새로운 인스턴스를 힙 영역에 만들어

if(str1==str2) System.out.println("str1, str2는 같은 레퍼런스"); 




열거형 (특정 값만 가져야 한다면 열거형을 사용하는 것이 좋다.)

class EnumExam{
public static final String MALE="MALE";
public static final String FEMALE ="FEMALE";

String gender1;
gender1 = EnumExam.MALE;
gender1 = "aa" //-> 아무거나 넣어도되  근데 MALE, FEMALE 두개만 넣고싶어  이럴때 열거형을 쓴다


Gender gender2;
gender2 = Gender.MALE;
gender2 = Gender.FEMALE;  

}

enum Gender{
  MALE,FEMALE
}





this (객체 자신을 참조하는 것)(클래스 안에서 자기 자신이 사용하고있는 메소드나, 변수 사용할 때 , 나의 생성자 호출할 때)

public class car{

String name;

   public car(String name){

   name = name  //-> 이렇게 해서  car 객체만들고 name 출력하면 null이 나와
   this.name = name // 이렇게 해야 해 

   }


  public car(){
    this("이름없음",0); //두개의 매개변수를 가진 생성자를 호출
  }

  public car(String name, int number){
   this.name = name;
   this.number = number;
  }

}




패키지 : 서로 관련이 있는 클래스 또는 인터페이스들을 묶어 놓은 묶음. 패키지를 사용함으로써 클래스들이 필요할 때만 사용될 수 있도록
         이름은 도메인 이름을 거꾸로 적은 후 프로젝트 이름을 붙여 사용(겹치지 않게 하기위해)
	 다른 패키지에 있는 클래스를 사용하려면  import를 해야한다. (java.lang 제외하고) ctrl + shift + o 하면 저절로 임포트 




캡슐화 : 관련된 내용을 모아서 가지고 있는 것 , 외부에 감추고 싶은 메소드나 변수가 있을 수도 있어 . -> 접근 제한자를 쓰는거지(public , protected, default, private)

super() -> 부모생성자



클래스의 형변환 : 부모타입이 자식타입을 가리키면  부모가 가진 내용들만 사용 가능하다.  근데 자식꺼 쓰고싶어  그러면 형변환을 하는거야

                   Car c = new Bus();  부모가 더 큰 타입
                   Bus bus = c; -> 오류  작은것은 큰걸 못 가르켜
                   Bus bus =(Bus)c;  -> 이거 가능 자식만의 함수 이런거 다 쓸 수 있어
  
 		   

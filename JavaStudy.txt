자바


C,C++ 의 포인터랑, 다중상속을 없애버렸어

플랫폼에 독립적이다 (JVM 만 있으면 어디서든지 Linux, Window, Mac )  , jvm 은 자바로 된 프로그램을 실행해주는 것 
Garbage Collector로 사용되지 않는 메모리를 자동적으로 정리해준다.

jdk 
환경 변수 지정 - 새로만들기   이름 : JAVA_HOME    값 : jdk가 설치된 경로    , CLASSPATH, PATH  다  혀 




int [] arr= {10,20,30,40,50}

for(int value: arr){
  System.out.println(value);
}




String 클래스 : new라는 연산자 필요없이 인스턴스를 만들수 있다.  1. String str1 = "hello";, 2.String str2 = "hello" 3.String str3 = new String("hello"); 4.String str4 = new String("hello");
1.은 상수 영역에 저장됨 , 2.는 1이랑 같은것을 가르킨다. 
3. 새로운 인스턴스를 힙 영역에 만들어지게되 4 역시 새로운 인스턴스를 힙 영역에 만들어

if(str1==str2) System.out.println("str1, str2는 같은 레퍼런스"); 




열거형 (특정 값만 가져야 한다면 열거형을 사용하는 것이 좋다.)

class EnumExam{
public static final String MALE="MALE";
public static final String FEMALE ="FEMALE";

String gender1;
gender1 = EnumExam.MALE;
gender1 = "aa" //-> 아무거나 넣어도되  근데 MALE, FEMALE 두개만 넣고싶어  이럴때 열거형을 쓴다


Gender gender2;
gender2 = Gender.MALE;
gender2 = Gender.FEMALE;  

}

enum Gender{
  MALE,FEMALE
}





this (객체 자신을 참조하는 것)(클래스 안에서 자기 자신이 사용하고있는 메소드나, 변수 사용할 때 , 나의 생성자 호출할 때)

public class car{

String name;

   public car(String name){

   name = name  //-> 이렇게 해서  car 객체만들고 name 출력하면 null이 나와
   this.name = name // 이렇게 해야 해 

   }


  public car(){
    this("이름없음",0); //두개의 매개변수를 가진 생성자를 호출
  }

  public car(String name, int number){
   this.name = name;
   this.number = number;
  }

}




패키지 : 서로 관련이 있는 클래스 또는 인터페이스들을 묶어 놓은 묶음. 패키지를 사용함으로써 클래스들이 필요할 때만 사용될 수 있도록
         이름은 도메인 이름을 거꾸로 적은 후 프로젝트 이름을 붙여 사용(겹치지 않게 하기위해)
	 다른 패키지에 있는 클래스를 사용하려면  import를 해야한다. (java.lang 제외하고) ctrl + shift + o 하면 저절로 임포트 




캡슐화 : 관련된 내용을 모아서 가지고 있는 것 , 외부에 감추고 싶은 메소드나 변수가 있을 수도 있어 . -> 접근 제한자를 쓰는거지(public , protected, default, private)

super() -> 부모생성자



클래스의 형변환 : 부모타입이 자식타입을 가리키면  부모가 가진 내용들만 사용 가능하다.  근데 자식꺼 쓰고싶어  그러면 형변환을 하는거야

                   Car c = new Bus();  부모가 더 큰 타입
                   Bus bus = c; -> 오류  작은것은 큰걸 못 가르켜
                   Bus bus =(Bus)c;  -> 이거 가능 자식만의 함수 이런거 다 쓸 수 있어
  
 		   


interface - > java8 부터는 default method 와 static method 구현가능  (원래는 추상메소드만 가능했어)


public interface calculator{

   default int exec(int i,int j){  -> 자식클래스에서 오버라이딩 안해도된다.     ,  메인함수내에서  calculator cal = new MyCal()(자식클래스);    cal.exec(3,4)  하면된다.
         return i+j;
    }

   public static int exec2(int i,int j){    -> 메인함수 내에서 calculator.exec2(3,4) 하면된다.  cal.exec2(3,4); -> 하면안되
          return i*j;
   }
} 




내부클래스 -> 클래스 안에 선언된 클래스 

1.인스턴스 클래스 - 클래스 안에 인스턴스 변수, 즉 필드를 선언하는 위치에 클래스를 선언한 경우

public class innerexam1{
   
   class Cal{
     int value = 0;
     public void plus(){ value ++;}
   
      }	


    public static void main(){

	innerexam1 t = new innerexam1();
        innerexam1.Cal cal = t.new Cal();
        cal.plus();	
  }
}


2. static 클래스 - 내부 클래스가 static으로 선언된 경우


public class innerexam1{
   
  static class Cal{
     int value = 0;
     public void plus(){ value ++;}
   
      }	


    public static void main(){
        innerexam1.Cal cal = new innerexam1.Cal();
        cal.plus();	
  }
}

3. 지역클래스  - 메소드 안에 클래스를 선언한 경우


public class innerexam1{
   
 public void exec(){
     class Cal{
        int value = 0;
        public void plus(){ value ++;}
        }

      Cal cal = new Cal();
      cal.plus();
	
  }

    public static void main(){
        innerexam1 t = new innerexam1();
        t.exec();	
  }
}

4. 익명클래스 - 상속받는 클래스를 만들 필요가 없기때문에, 해당클래스에서만 사용되고 다른 클래스에서 사용안하려고


 public abstract class Action{
        public abstract void exec();
    }


  public class ActionExam{
        public static void main(String args[]){
           
	      Action action = new Action(){
                public void exec(){
                    System.out.println("exec");
                }
            };

            action.exec();
        }
    }





throws - Exception 처리를 무시하는것, 호출한 쪽에게 오류를처리하라


public class ExceptionExam2 {

        public static void main(String[] args) {
            int i = 10;
            int j = 0;
            try{
                int k = divide(i, j);
                System.out.println(k);
            } catch(ArithmeticException e){
                System.out.println("0으로 나눌수 없습니다.");
            }

        }

        public static int divide(int i, int j) throws ArithmeticException{
            int k = i / j;
            return k;
        }

    }



throw - 강제로 오류를 발생시키는 것



public class ExceptionExam3 {   
        public static void main(String[] args) {
            int i = 10;
            int j = 0;
            try{
                int k = divide(i, j);
                System.out.println(k);
            }catch(IllegalArgumentException e){
                System.out.println(e.toString());
            }           
        }

        public static int divide(int i, int j) throws IllegalArgumentException{
            if(j == 0){
                throw new IllegalArgumentException("0으로 나눌 수 없어요.");
            }
            int k = i / j;
            return k;
        }   
    }




사용자 정의 Exception ,      Exception 클래스를 상속받은 클래스들은 checked Exception 이고 반드시 오류를 처리해야만 해, 예외처리 하지 않으면 컴파일 오류를 발생
                       RuntimeException 클래스를 상속받은 클래스들은 Unchecked Excepton 이고 예외처리를 하지 않아도 컴파일 시에는 오류를 발생시키지 않는다.




public class BizException extends RuntimeException{

  public BizException(String msg){
  	super(msg);   //이렇게만해주면됨  부모클래스 생성자만 정의해주면되  
  }
  
  public BizException(Exception ex){
        super(ex);
  }
}


public class BizService{
  public void bizMethod(int i) throws BizException{
	
	if(i<0){throw new BizException("매개변수 i는 0이상이여야 합니다.")}
		

   }
 }


public class BizExam{

	public static void main(String[] args){
		BizService biz = new BizService();
  		biz.bizMethod(5);
		biz.bizMethod(-3); //예와    - try catch문 해줘두되고 ,  throws를 해줬기때문에 안해줘도되

	}
}




object 클래스   equals, tostring, hashcode  -> 적절하게 오버라이딩해 



wrapper - 기본형 타입을 객체로 변환시킬때

public class WrapperExam{
	
	public static void main(String[] args){

		int i=5;
		Integer i2 = new Integer(5);
		Integer i3 = 5; //오토 박싱, 기본형을 객체형으로 자동 형변환
		int i4 = i2.intValue();
		int i5 = i3; //오토 언박싱  객체타입의 값을 기본형으로 자동 형변환

	}
}


String 클래스는 자기자신이 안변하는, String Buffer는 자기자신이 변하는 클래스


StringBuffer sb = new StringBuffer();
sb.append("hello");
sb.append(" ");
sb.append("world");

String str = sb.toString();


StringBuffer sb2 = new StringBuffer();
StringBuffer sb3 = sb2.append("hello"); //StringBuffer가 가지고 있는 메소드들은 대부분 자기 자신,this를 반환

if(sb2==sb3) System.out.println("sb2==sb3");   

String str2 = new StringBuffer().append("hello").append(" ").append("world").toString(); // 자기 자신을 반환하므로 메소드 체인방식으로 사용할 수 있도록됨

append 메소드 외에도 길이를 구하거나, 자르거나 등의 다양한 메소드들을 가지고 있습니다.




String str1 ="hello";
String str2 ="world"; 

String str3 = str1+str2;   // -> str3 = new StringBuffer().append(str1).append(str2).toString();   이거랑 똑같다.  
//문자열끼리 + 연산을 하면 StringBuffer 객체가 생성됨  100번하면 100번생성

String str5 ="";
StringBuffer sb  = new StringBuffer();
for(int i=0;i<100;i++){
  str5=str5+"*";      //-> 이러면 StringBuffer객체가 100번생성 , sb.append("*") ->이게 훨씬빠르다    
}



Math 클래스는 생성자가 private로 되어있기때문에 new 해서 쓸수 없어 .   하지만 모든 메소드가 static이라 Math.함수명 으로 쓸수있다.

date클래스는 지역화를 지원하지않는다.  지역화는 국가별로현재 날짜와, 시간 은 다룰수 있는것   ,   그래서 Calendar 클래스가 나옴




자료구조 클래스들을 컬렉션 프레임워크


컬렉션 인터페이스 ->  add, iterator, size 함수등 가지고있어 .  - 중복허용, 자료가 저장된 순서도 기억하지 못함   -> 그래서 iterator 인터페이스를 사용, hasNext, next

 hashset       <-- set 인터페이스 는 컬렉션인터페이스를 상속받음 ->  중복을 허용하지않아.  add(Object) -> 같은자료있으면 false  없으면 true
 arraylist     <-- list 인터페이스 도 컬렉션인터페이스를 상속받음 -> 저장된 순서를 기억해   get(int) -> 몇번째 저장된순서 값 보여줘
 hashmap       <-- map 인터페이스 key와 value 가진다.  put메소드를 이용해 key와 value 로 저장  ,  값을 볼때는 key를 이용하여 get(Object, Object) 함수 쓴다.   모든 key는 중복을 가지면안되 , keySet()-> 모든 key를 반환하는것



제너릭   클래스 옆에 <E>  이런식으로 써준다.  generic을 사용하는 대표적인 클래스는 컬렉션 프레임워크와 관련된 클래스

 public class Box<E> {
        private E obj;
        public void setObj(E obj){
            this.obj = obj;
        }

        public E getObj(){
            return obj;
        }
    }


 	    Box<String> box2 = new Box<>();
            box2.setObj("hello");
            String str = box2.getObj();
            System.out.println(str);

            Box<Integer> box3 = new Box<>();
            box3.setObj(1);
            int value = (int)box3.getObj();
            System.out.println(value);




SET   - 중복이 없고 순서도 없는 자료구조     - Hashset, Treeset


Set<String> set1 = new HashSet<>();


boolean flag1 = set1.add("kim");  //true
boolean flag2 = set1.add("kang"); //true
boolean flag3 = set1.add("kim"); //false

System.out.println(set1.size()); //2

Iterator<String> iter = set1.iterator();

while(iter.hasnext()){

String str = iter.next();
System.out.println(str);

}


List  -  중복이 있고, 순서도 있다., 저장공간이 필요에 따라 자유  - ArrayList

List<String> list = new ArrayList<>();
list.add("kim");


String str = list.get(0);


MAP  - key와 value를 상으로 저장하는 자료구조  키는 중복될수 없고, 값은 중복될수 있다.  키가 중복으로 들어올경우 나중에 들어온 값으로 바뀐다.


MAP<String,String> map = new HashMap<>();

map.put("001","kim");
System.out.println(map.get("001")); //kim

map.put("001","kang");
System.out.println(map.get("001")); //kang   size - 1


Set<String> keys = map.keySet(); //모든 키값을 빼내는거 return형이 set이야 

Itnerator<String> iter = keys.interator();

while(iter.hasNext())
{
String key=iter.next();
String value = map.get(key);
System.out.println(key + ":" + value);
}



Date 클래스 -> 지역화에 대한 부분이 고려되지 않았다.

Calendar클래스 -> 추상클래스 , 인스턴스를 생성하려면   getInstance() 사용해야해 

LocalDateTime, LocalDate,LocalTime   -> 최근에 만들어지는거     

LocalDateTime timePoint = LocalDateTime.now();   -> timePoint.getHour(); ... 이런거 쓸쑤있어

LocalDate ld1 = LocalDate.of(2012,Month.DECEMBER,12)    -> 2012-12-12

LocalTime lt1 = LocalTime.of(17,17);  17:17 ;
LocalTime lt2 = LocalTime.parse("10:15:30");  10:15:30;



자바 IO -> 크게 byte 단위, 문자단위로 입출력 클래스 나뉜다. 
byte 단위 -- InputStream, OutputStream 이라는 추상클래스를 상속받아 만들어진다.
char 단위 -- Reader 와 Writer 라는 추상클래스를 상속받아 만들어집니다.


파일로부터 입력받고 쓰기 위한 클래스 - FileInputStream, FileOutputStream, FileReader, FileWriter 
배열로부터 입력받고 쓰기 위한 클래스 - ByteArrayInputStream, ByteArrayOutputStream, CharReader,CharWriter  

DataInputStream,DataOutputStream -> 다양한 데이터 형을 입력받고 출력

PrintWriter - 다양하게 한줄 출력하는  println 메소드 가짐,   BufferedReader - 한줄 입력받는 readLine()메소드 가짐 


